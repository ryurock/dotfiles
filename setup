#!/usr/bin/env bash

set -e
voiceverbose=0

while getopts :v OPT
do
  case $OPT in
    v ) voiceverbose=1 ;;
    * ) echo "Usage: $CMDNAME [-v voiceverbose]" 1>&2
        exit 1 ;;
  esac
done

#
# voice and stdout method
#
vecho() {
    if [ ${voiceverbose} = 1 ]; then
        return
    fi

    echo $1$2
    say -v Alex $2
}

#
# initialize
#
init() {
    # OS from OSX 
    if [ `uname` != "Darwin" ]; then
        echo "[Failed] this installer OSX only."
        exit
    fi

    vecho "[Alex]" "Welcome to app development.This that are running this command is the first step that you have to participate in the development of the now this apps. Let's first learn how this apps while speaking with me is going to the development and use any tool "

    # XCode Commandline Tool Install
    if ! [ `clang --help | grep -c "clang LLVM compiler"` -eq 1 ]; then
        echo "[Install] not installed. XCode Commandline Tools."
        exit 1
    else
        echo "[Install] Already exists dependecy XCode Commandline Tools."
    fi
}

#
# homebrew setup
#
brewSetup() {
    vecho "[Alex]" "First to homebrew is I'll make sure you have installed"
    # Homebrew install
    if ! which brew >/dev/null 2>&1; then
        echo "[Install] dependency Homebrew"
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        command_ver=$(brew --version)
        command=$(which brew)
        brew doctor
        echo "[Install] installed Homebrew. path : ${command} version : ${command_ver}"
    else
        echo "[Install] Already exists dependency Homebrew"
    fi
}

#
# python setup
#
pythonSetup() {
    vecho "[Alex]" "dependecy comanndline git. try install git"
    brew install git || true

    vecho "[Alex]" "dependecy comanndline pyenv. try install pyenv"
    brew install pyenv || true
    python_version="2.7.10"
    if [ `pyenv versions | grep -c "${python_version}"` -eq 0 ]; then
        pyenv install ${python_version}
        pyenv global ${python_version}
        pyenv rehash
    fi

    grepWord="pyenv init"

    #どのバージョンかはわからないけれどもOSXのデフォルトのshellがzshになっているため追加する
    if ! [ -e ~/.zshrc ]; then
        touch ~/.zshrc
    fi

    if [ `cat ~/.zshrc| grep -c "${grepWord}"` -eq 0 ]; then
        vecho "[Alex]" "configration python pyenv added zshrc"
        echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrc
        echo 'if which pyenv > /dev/null; then eval "$(pyenv init - zsh)"; fi' >> ~/.zshrc
        echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.zshrc
        source ~/.zshrc
    fi


    if ! [ -e ~/.bash_profile ]; then
        touch ~/.bash_profile
    fi

    if [ `cat ~/.bash_profile| grep -c "${grepWord}"` -eq 0 ]; then
        vecho "[Alex]" "configration python pyenv added bash_profile"
        echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
        echo 'if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi' >> ~/.bash_profile
        echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bash_profile
        source ~/.bash_profile
    fi

}

#
# setup ansible
#
ansibleSetup() {
    vecho "[Alex]" "It will do the installation because it requires some pip module in ansible of dependency"
    sudo easy_install pip
    sudo pip install paramiko PyYAML Jinja2 httplib2 six
    vecho "[Alex]" "dependecy comanndline ansible. try install ansible"
    brew install ansible || true

    if ! [ -e ~/ansible_hosts ]; then
        vecho "[Alex]" "configration ansible added ansible_hosts"
        echo "127.0.0.1" >> ~/ansible_hosts
    fi

    grepWord="ANSIBLE_INVENTORY"
    if [ `cat ~/.zshrc | grep -c "${grepWord}"` -eq 0 ]; then
        vecho "[Alex]" "configration ansible added zshrc"
        echo "export ansible_inventory=~/ansible_hosts" >> ~/.zshrc
    fi

    if [ `cat ~/.bash_profile | grep -c "${grepWord}"` -eq 0 ]; then
        vecho "[Alex]" "configration ansible added bash_profile"
        echo "export ANSIBLE_INVENTORY=~/ansible_hosts" >> ~/.bash_profile
    fi
}

#
# main
#

init
brewSetup
pythonSetup
ansibleSetup
